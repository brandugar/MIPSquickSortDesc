.data
	vector: .word 1,2,3,4,5,6,7,8,9,0,8,7,9,7,8
	bajo: .word 0
	alto: .word 14
.text
	la $a0, vector
	lw $a1, bajo
	lw $a2, alto
	jal quickSort
	
	li $v0, 10
	syscall

	# -------------------------------------------- FUNCIONES ---------------------------------------------					
	quickSort:
		#addi $sp, $sp, -4
		#sw $a0, 0($sp)
		
		addi $sp, $sp, -4								# Reservamos espacio en la pila
		sw $ra, 0($sp)								    # Guardamos ra en la pila
		
		ifBajoMenorAlto:
			bge $a1, $a2, finIfBajoMenorAlto		    # Si bajo > alto ; salte a finBajoMenorAlto
			
			add, $t0, $zero, $a2		    			# t0 = alto
			sub $t0, $t0, $a1		    				# t0 = alto - bajo
			srl $t0, $t0, 1 		    				# t0 = t0 / 2
			add $t0, $t0, $a1				    		# t0 = t0 + bajo
			sll $t0, $t0, 2				    			# t0 = t0 * 4
			add $t0, $t0, $a0				    		# t0 = t0 + dir(vector)
			lw $t0, 0($t0)				    			# t0 = pivote
			add $t1, $zero, $a1				    		# t1 = bajo = i
			add $s0, $zero, $a1				    		# s0 = bajo
			add $t2, $zero, $a2				    		# t2 = alto = j
			add $s1, $zero, $a2				    		# s1 = alto
			whileIMenorIgualJ:
				bgt $t1, $t2, finWhileIMenorIgualJ		# SI t1 (bajo o i) > t2 (alto o j); salte a finWhileIMenorIgualJ
				whileArrayIMayorPivote:
					sll $t3, $t1, 2						# t3 = t1 * 4 = i*4
					add $t3, $t3, $a0					# t3 = t3 + dir(vector) = dir(vector[i])
					add $t6, $zero, $t3					# t6 = t3 = dir(vector[i])
					lw $t3, 0($t3)						# t3 = vector[i]
					ble $t3, $t0, whileArrayJMenorPivote# SI t3 (vector[i] <= pivote; salte a whileArrayJMenorPivote)
					addi $t1, $t1, 1					# t1 = i++
					j whileArrayIMayorPivote			# salte a whileArrayIMayorPivote
				whileArrayJMenorPivote:
					sll $t4, $t2, 2						# t4 = j * 4 (posicion(j) del vetor)
					add $t4, $t4, $a0					# t4 = dir(vector[j])
					add $t7, $zero, $t4					# t7 = dir(vetor[j])
					lw $t4,0($t4)						# t4 = vector[j]
					bge $t4, $t0, ifIMenorIgualJ		# SI t4 (vector[j]) > pivote; salte a ifIMenorIgualJ
					addi $t2, $t2, -1					# t2 (j) = j--
					j whileArrayJMenorPivote 			# salte a whileArrayJMenorPivote
				ifIMenorIgualJ:
					bgt $t1, $t2, finWhileIMenorIgualJ 	# SI i > j; salte a finWhileIMenorIgualJ
					add $t5, $zero, $t3					# t5 = t3 = vector[i]
					sw $t3, 0($t7)						# vector[j] = vetor[i]
					sw $t4, 0($t6)						# vector[i] = vector[j]
					addi, $t1, $t1, 1					# i++
					addi $t2, $t2, -1					# j--
					j whileIMenorIgualJ					# salte a whileIMenorIgualJ
			finWhileIMenorIgualJ:
				addi $sp, $sp, -4								# Reservamos espacio en la pila
				sw $a2, 0($sp)									# Guardamos alto en la pila
				add $a2, $zero, $t2 					# a2 = j
				jal quickSort
				lw $a2, 0($sp)								# recuperamos ra de la pila
				addi $sp, $sp, 4							# Liberamos espacio en la pila
				addi $sp, $sp, -4								# Reservamos espacio en la pila
				sw $a1, 0($sp)									# Guardamos bajo en la pila
				add $a1, $zero, $t1						# a1 (bajo) = i
				jal quickSort
				lw $a1, 0($sp)								# recuperamos alto de la pila
				addi $sp, $sp, 4							# Liberamos espacio en la pila
				j finIfBajoMenorAlto
			
		finIfBajoMenorAlto:
			lw $ra, 0($sp)								# recuperamos bajo de la pila
			addi $sp, $sp, 4							# Liberamos espacio en la pila
			jr $ra										# Saltamos a ra
		
